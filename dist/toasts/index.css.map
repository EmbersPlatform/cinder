{"version":3,"sources":["../../src/toasts/toasts.scss","../../src/support/variables/layout.scss","../../src/support/variables/misc.scss","../../src/support/mixins/layout.scss"],"names":[],"mappings":"AAEA,OACE,YAAa,CACb,UCyBU,CDxBV,6BAA8B,CAC9B,sCAAuC,CACvC,iBEAoB,CFCpB,8EAAgF,CGI5E,0BHVN,OASI,iBAAkB,CAClB,eAAgB,CAChB,WCuBkB,CDrBrB,CAED,YACE,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,UAAoB,CACpB,aAAc,CACd,6BAA8B,CAC9B,2CAA4C,CAC5C,+CAAkE,CAClE,cAAe,CACf,8BAA+B,CAC/B,iCAAkC,CACnC,eAGC,YCIoB,CDHrB,qBAGC,eAAgB,CAChB,YCDoB,CDEpB,aAAc,CACd,4BAA6B,CAC7B,QAAS,CALX,sDASI,YAAa,CACb,WAAY,CAVhB,4BAcI,WAAY,CACb,gBAMD,qCAAsC,CACtC,sFAAwF,CAF1F,4BAKI,qCAAsC,CACtC,mDAAoD,CACpD,mDAAoD,CACrD,cAID,oCAAqC,CACrC,qFAAuF,CAFzF,0BAKI,oCAAqC,CACrC,kDAAmD,CACnD,kDAAmD,CACpD,gBAID,qCAAsC,CACtC,sFAAwF,CAF1F,4BAKI,qCAAsC,CACtC,mDAAoD,CACpD,mDAAoD,CACrD,gBAID,qCAAsC,CACtC,sFAAwF,CAF1F,4BAKI,qCAAsC,CACtC,mDAAoD,CACpD,mDAAoD,CACrD,kBAMD,4EAA6E,CAC9E,4BAGC,GACE,SAAU,CACV,0BAA2B,CAAA,CAI/B,mBACE,+EAAgF,CACjF,6BAGC,KACE,mBAAoB,CACpB,SAAU,CACV,0BAA2B,CAAA,CAI/B,gBACE,+CAAgD,CACjD,0BAGC,KAAO,sBAAuB,CAC9B,GAAK,wBAAyB,CAAA","file":"index.css","sourcesContent":["// Toast\n\n.Toast {\n  display: flex;\n  margin: $spacer-2;\n  color: var(--color-toast-text);\n  background-color: var(--color-toast-bg);\n  border-radius: $border-radius;\n  box-shadow: inset 0 0 0 1px var(--color-toast-border), var(--color-toast-shadow);\n\n  @include breakpoint(sm) {\n    width: max-content;\n    max-width: 450px;\n    margin: $spacer-3;\n  }\n}\n\n.Toast-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: $spacer-3 * 3;\n  flex-shrink: 0;\n  color: var(--color-toast-icon);\n  background-color: var(--color-toast-icon-bg);\n  border: $border-width $border-style var(--color-toast-icon-border);\n  border-right: 0;\n  border-top-left-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\n\n.Toast-content {\n  padding: $spacer-3;\n}\n\n.Toast-dismissButton {\n  max-height: 54px; // keeps button aligned to the top\n  padding: $spacer-3;\n  color: inherit;\n  background-color: transparent;\n  border: 0;\n\n  &:focus,\n  &:hover {\n    outline: none;\n    opacity: 0.7;\n  }\n\n  &:active {\n    opacity: 0.5;\n  }\n}\n\n// Modifier\n\n.Toast--loading {\n  color: var(--color-toast-loading-text);\n  box-shadow: inset 0 0 0 1px var(--color-toast-loading-border), var(--color-toast-shadow);\n\n  .Toast-icon {\n    color: var(--color-toast-loading-icon);\n    background-color: var(--color-toast-loading-icon-bg);\n    border-color: var(--color-toast-loading-icon-border);\n  }\n}\n\n.Toast--error {\n  color: var(--color-toast-danger-text);\n  box-shadow: inset 0 0 0 1px var(--color-toast-danger-border), var(--color-toast-shadow);\n\n  .Toast-icon {\n    color: var(--color-toast-danger-icon);\n    background-color: var(--color-toast-danger-icon-bg);\n    border-color: var(--color-toast-danger-icon-border);\n  }\n}\n\n.Toast--warning {\n  color: var(--color-toast-warning-text);\n  box-shadow: inset 0 0 0 1px var(--color-toast-warning-border), var(--color-toast-shadow);\n\n  .Toast-icon {\n    color: var(--color-toast-warning-icon);\n    background-color: var(--color-toast-warning-icon-bg);\n    border-color: var(--color-toast-warning-icon-border);\n  }\n}\n\n.Toast--success {\n  color: var(--color-toast-success-text);\n  box-shadow: inset 0 0 0 1px var(--color-toast-success-border), var(--color-toast-shadow);\n\n  .Toast-icon {\n    color: var(--color-toast-success-icon);\n    background-color: var(--color-toast-success-icon-bg);\n    border-color: var(--color-toast-success-icon-border);\n  }\n}\n\n// Animations\n\n.Toast--animateIn {\n  animation: Toast--animateIn 0.18s cubic-bezier(0.22, 0.61, 0.36, 1) backwards;\n}\n\n@keyframes Toast--animateIn {\n  0% {\n    opacity: 0;\n    transform: translateY(100%);\n  }\n}\n\n.Toast--animateOut {\n  animation: Toast--animateOut 0.18s cubic-bezier(0.55, 0.06, 0.68, 0.19) forwards;\n}\n\n@keyframes Toast--animateOut {\n  100% {\n    pointer-events: none;\n    opacity: 0;\n    transform: translateY(100%);\n  }\n}\n\n.Toast--spinner {\n  animation: Toast--spinner 1000ms linear infinite;\n}\n\n@keyframes Toast--spinner {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}","// these are values for the display CSS property\n$display-values: (\n  block,\n  flex,\n  inline,\n  inline-block,\n  inline-flex,\n  none,\n  table,\n  table-cell\n) !default;\n\n// maps edges to respective corners for border-radius\n$edges: (\n  top: (top-left, top-right),\n  right: (top-right, bottom-right),\n  bottom: (bottom-right, bottom-left),\n  left: (bottom-left, top-left)\n) !default;\n\n/* These are our margin and padding utility spacers. The default step size we */\n/* use is 8px. This gives us a key of: */\n/*    0 => 0px */\n/*    1 => 4px */\n/*    2 => 8px */\n/*    3 => 16px */\n/*    4 => 24px */\n/*    5 => 32px */\n/*    6 => 40px */\n$spacer: 8px;\n\n\n/* Our spacing scale */\n$spacer-0: 0;                  /* 0 */\n$spacer-1: $spacer / 2;        /* 4px */\n$spacer-2: $spacer;            /* 8px */\n$spacer-3: $spacer * 2;        /* 16px */\n$spacer-4: $spacer * 3;        /* 24px */\n$spacer-5: $spacer * 4;        /* 32px */\n$spacer-6: $spacer * 5;        /* 40px */\n\n/* The list of spacer values */\n$spacers: (\n  $spacer-0,\n  $spacer-1,\n  $spacer-2,\n  $spacer-3,\n  $spacer-4,\n  $spacer-5,\n  $spacer-6,\n) !default;\n\n/* And the map of spacers, for easier looping: */\n/* @each $scale, $length in $spacer-map { ... } */\n$spacer-map: (\n  0: $spacer-0,\n  1: $spacer-1,\n  2: $spacer-2,\n  3: $spacer-3,\n  4: $spacer-4,\n  5: $spacer-5,\n  6: $spacer-6,\n) !default;\n\n/* Em spacer variables */\n$em-spacer-1: 0.0625em; /* 1/16 */\n$em-spacer-2: 0.125em;  /* 1/8 */\n$em-spacer-3: 0.25em;   /* 1/4 */\n$em-spacer-4: 0.375em;  /* 3/8 */\n$em-spacer-5: 0.5em;    /* 1/2 */\n$em-spacer-6: 0.75em;   /* 3/4 */\n\n/* Size scale */\n/* Used for buttons, inputs, labels, avatars etc. */\n$size: 16px;\n\n$size-0: 0;\n$size-1: $size;                 /* 16px */\n$size-2: $size-1 +  4px;  /* 20px */\n$size-3: $size-2 +  4px;  /* 24px */\n$size-4: $size-3 +  4px;  /* 28px */\n$size-5: $size-4 +  4px;  /* 32px */\n$size-6: $size-5 +  8px;  /* 40px */\n$size-7: $size-6 +  8px;  /* 48px */\n$size-8: $size-7 + 16px;  /* 64px */\n\n/* Fixed-width container variables */\n$container-width: 980px;\n$grid-gutter:     10px;\n\n// Breakpoint widths\n$width-xs: 0 !default;\n// Small screen / phone\n$width-sm: 544px !default;\n// Medium screen / tablet\n$width-md: 768px !default;\n// Large screen / desktop (980 + (16 * 2)) <= container + gutters\n$width-lg: 1012px !default;\n// Extra large screen / wide desktop\n$width-xl: 1280px !default;\n\n/* Responsive container widths */\n$container-sm: $width-sm;\n$container-md: $width-md;\n$container-lg: $width-lg;\n$container-xl: $width-xl;\n\n/* Breakpoints in the form (name: length) */\n$breakpoints: (\n  sm: $width-sm,\n  md: $width-md,\n  lg: $width-lg,\n  xl: $width-xl\n) !default;\n\n$responsive-variants: (\n  \"\": \"\",\n  sm: \"-sm\",\n  md: \"-md\",\n  lg: \"-lg\",\n  xl: \"-xl\",\n) !default;\n\n// responive utility position values\n$responsive-positions: (\n  static,\n  relative,\n  absolute,\n  fixed,\n  sticky\n) !default;\n","// Border\n$border-width: 1px !default;\n$border-style: solid !default;\n$border: $border-width $border-style var(--color-border-primary) !default;\n\n// Border Radius\n$border-radius-1:  2px !default;\n$border-radius-2:  4px !default;\n$border-radius-3:  6px !default;\n$border-radius: $border-radius-2 !default;\n\n// Tooltips\n$tooltip-max-width: 250px !default;\n$tooltip-delay: 0.4s !default;\n$tooltip-duration: 0.1s !default;","@mixin breakpoint($breakpoint) {\n  @if $breakpoint == \"\" {\n    @content;\n  }\n\n  @else {\n    /* Retrieves the value from the key */\n    $value: map-get($breakpoints, $breakpoint);\n\n    /* If the key exists in the map */\n    @if $value != null {\n      /* Prints a media query based on the value */\n      @media (min-width: $value) {\n        @content;\n      }\n    }\n\n    /* If the key doesn't exist in the map */\n    @else {\n      @warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. \"\n        + \"Please make sure it is defined in `$breakpoints` map.\";\n    }\n  }\n}\n\n// Clearfix\n//\n// Clears floats via mixin.\n\n@mixin clearfix {\n  &::before {\n    display: table;\n    content: \"\";\n  }\n\n  &::after {\n    display: table;\n    clear: both;\n    content: \"\";\n  }\n}"]}